import React, { useState, useRef } from "react";
import {
  Box,
  TextField,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
export const TestSettingsDilog = ({
  initialTest,
  settingsOpen,
  setSettingsOpen,
  onSave,
  testSettings,
}) => {
  const [minOptions, setMinOptions] = useState(testSettings.min_questions);
  //   const [maxOptions, setMaxOptions] = useState(testSettings.maxOptions);
  const [belbinBlocks, setBelbinBlocks] = useState(testSettings.belbin_block);
  const [belbinOptionsPerBlock, setBelbinOptionsPerBlock] = useState(
    testSettings.belbin_questions_in_block
  );

  const handleSave = () => {
    onSave({
      min_questions: minOptions,
      belbin_block: belbinBlocks,
      belbin_questions_in_block: belbinOptionsPerBlock,
    }); // üëà –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—é
    setSettingsOpen(false);
  };

  return (
    <Dialog
      open={settingsOpen}
      onClose={() => setSettingsOpen(false)}
      fullWidth
    >
      <DialogTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞</DialogTitle>
      <DialogContent>
        {/* –û–±—ã—á–Ω—ã–µ —Ç–µ—Å—Ç—ã */}
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 1 }}>
          –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç
        </Typography>
        <TextField
          label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–Ω–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"
          type="number"
          fullWidth
          value={minOptions}
          onChange={(e) => {
            const val = Math.max(0, Number(e.target.value));
            setMinOptions(val);
          }}
          inputProps={{ min: 0 }}
          sx={{ mt: 1 }}
        />
        {/* <TextField
          label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"
          type="number"
          fullWidth
          value={maxOptions}
          onChange={(e) => {
            const val = Math.max(0, Number(e.target.value));
            setMaxOptions(val);
          }}
          inputProps={{ min: 0 }}
          sx={{ mt: 2 }}
        /> */}

        {/* –¢–µ—Å—Ç –ë–µ–ª–±–∏–Ω–∞ */}
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 4 }}>
          –¢–µ—Å—Ç –ë–µ–ª–±–∏–Ω–∞
        </Typography>
        <TextField
          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤"
          type="number"
          fullWidth
          value={belbinBlocks}
          onChange={(e) => {
            const val = Math.max(0, Number(e.target.value));
            // onSave({ ...initialTest, belbinBlocks: val });
            setBelbinBlocks(val);
          }}
          inputProps={{ min: 0 }}
          sx={{ mt: 1 }}
        />
        <TextField
          label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ"
          type="number"
          fullWidth
          value={belbinOptionsPerBlock}
          onChange={(e) => {
            const val = Math.max(0, Number(e.target.value));
            setBelbinOptionsPerBlock(val);
            // onSave({ ...initialTest, belbinQuestionsPerBlock: val });
          }}
          inputProps={{ min: 0 }}
          sx={{ mt: 2 }}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={() => setSettingsOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
        <Button onClick={handleSave} variant="contained">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );
};
